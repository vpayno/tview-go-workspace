---
#
# .github/workflows/golang-bump.yml
#

# https://github.com/crazy-max/ghaction-import-gpg
# https://github.com/juliangruber/approve-pull-request-action
# https://github.com/peter-evans/create-or-update-project-card
# https://github.com/peter-evans/create-pull-request
# https://github.com/peter-evans/enable-pull-request-automerge
#
# yamllint disable rule:line-length
#
name: "Golang Version Bump Workflow"
on:  # yamllint disable-line rule:truthy
  schedule:
    #         ┌───────────── minute (0 - 59)
    #         │ ┌───────────── hour (0 - 23)
    #         │ │ ┌───────────── day of the month (1 - 31)
    #         │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #         │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #         │ │ │ │ │
    #         │ │ │ │ │
    #         │ │ │ │ │
    #         * * * * *
    - cron: '30 8 * * 4'
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  version-bump:
    name: Golang Version Bump
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      id-token: write  # Enable OIDC
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ github.ref }}
          submodules: recursive
      - name: Show BASH Version
        run: |
          bash --version

      # Adding this because the image usually has a dead version of Go.
      - name: Set up Go (using version in go.mod)
        id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version-file: './go.mod'
      - name: Install Dependencies
        run: |
          go version
          go install github.com/client9/misspell/cmd/misspell@latest
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Import GPG key
        if: false
        uses: chainguard-dev/actions/setup-gitsign@main
      - name: GPG/Git Setup
        run: |
          git config commit.gpgsign true
          git config user.signingKey 0xF26ABEB8EFED47A7
      - name: Check GPG setup
        run: |
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --import
          printf "\n"
          gpg --list-secret-keys --keyid-format=long
      - name: Bump Golang Version
        id: bump-golang-version
        run: |
          # git config user.name 'Victor Payno (GitHub Action Bot)'
          git config user.name 'Victor Payno [Bot]'
          git config user.email 'vpayno@users.noreply.github.com'
          # git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git remote -v
          printf "\n"
          printf "Original branch name: "; git branch --show-current
          git checkout "${GITHUB_REF:11}"
          printf "Current branch name: "; git branch --show-current
          git checkout -B bump_golang_version
          printf "\n"
          printf "PR branch name: "; git branch --show-current
          printf "\n"
          printf "%s=%s\n" OLD_GO_VER "$(awk '/^go / { print $NF }' go.mod)" | tee -a "${GITHUB_ENV}"
          ./scripts/go-version-bump --github-action
          printf "%s=%s\n" NEW_GO_VER "$(awk '/^go / { print $NF }' go.mod)" | tee -a "${GITHUB_ENV}"
          printf "\n"
          if ! git diff --quiet; then
            git add --update .
            git commit -S -m "build(go): bump golang version to $(awk '/^go / { print $NF }' go.mod)"
            printf "\n"
            git show
            printf "\n"
            git verify-commit --verbose HEAD~0
            printf "%s=%s\n" create-pr true | tee -a "${GITHUB_OUTPUT}"
          else
            printf "%s=%s\n" create-pr false | tee -a "${GITHUB_OUTPUT}"
            {
              printf "Golang version is already up to date.\n"
            } | tee -a "${GITHUB_STEP_SUMMARY}"
          fi
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: bump_golang_version
          force: true
          github_token: ${{ secrets.PAT }}
          tags: true
      - name: Create Pull Request (GitHub CLI)
        id: cpr
        if: steps.bump-golang-version.outputs.create-pr == 'true'
        run: |
          printf "PR branch name: "; git branch --show-current
          printf "\n"

          # gh label create "automated pr" || true
          # gh label create bump:minor || true
          pull_request_url="$(gh pr create \
            --assignee vpayno \
            --base main \
            --body "Bump Golang Version from ${OLD_GO_VER} to ${NEW_GO_VER}." \
            --head bump_golang_version \
            --label "bump:minor" \
            --label "automated pr" \
            --reviewer vpayno \
            --title "Bump Golang Version to ${NEW_GO_VER}" \
            )"
          printf "%s=%s\n" pull-request-number "${pull_request_url##*/}" | tee -a "${GITHUB_OUTPUT}"
          printf "%s=%s\n" pull-request-url "${pull_request_url}" | tee -a "${GITHUB_OUTPUT}"

          # sleep 1s  # to make sure the next command does find the pr
          # gh pr merge --auto --rebase --delete-branch "${pull_request_url##*/}"
      - name: Create Pull Request (peter-evans/create-pull-request)
        id: cpr-disabled
        if: false && steps.bump-golang-version.outputs.create-pr == 'true'
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT }}
          base: main
          branch: bump_golang_version
          delete-branch: true
          title: Bump Golang Version to ${{ env.NEW_GO_VER }}
          body: |
            Bump Golang Version
            - Auto-generated by [create-pull-request][1]
            - Auto-approved by [approve-pull-request-action][2]
            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/juliangruber/approve-pull-request-action
          labels: |
            bump:minor
            automated pr
          assignees: vpayno
          commit-message: "build(go): bump golang version to ${{ env.NEW_GO_VER }}"
          committer: Victor Payno [Bot] <vpayno@users.noreply.github.com>
          author: Victor Payno [Bot] <vpayno@users.noreply.github.com>
      - name: Check PR outputs
        if: steps.cpr.outputs.pull-request-number > 0
        run: |
          {
            printf "Pull Request Number: %s\n" "${{ steps.cpr.outputs.pull-request-number }}"
            printf "Pull Request URL   : %s\n" "${{ steps.cpr.outputs.pull-request-url }}"
          } | tee -a "${GITHUB_STEP_SUMMARY}"
      - name: Wait for Go checks to succeed
        uses: fountainhead/action-wait-for-check@v1.1.0
        if: false && steps.cpr.outputs.pull-request-number
        id: wait-for-go-checks
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: go-check-barrier-job
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: Tag Release
        if: steps.cpr.outputs.pull-request-number > 0
        id: tag-release
        run: |
          {
            printf "\n"
          } | tee -a "${GITHUB_STEP_SUMMARY}"
          tag_mode="$(gh pr view "${{ steps.cpr.outputs.pull-request-number }}" --json labels --jq '.labels[] | select(.name | startswith("bump:")).name' | cut -f2 -d:)"
          {
            printf "Tag Bump Mode: %s\n" "${tag_mode}"
          } | tee -a "${GITHUB_STEP_SUMMARY}"
          latest_tag="$(git tag | sort -V | grep -E "^v[0-9]+.[0-9]+.[0-9]+$" | tail -n 1)"
          {
            printf "Latest Tag: %s\n" "${latest_tag}"
          } | tee -a "${GITHUB_STEP_SUMMARY}"
          declare -i major=0 minor=0 hotfix=0
          regex="^v([0-9]+)[.]([0-9]+)[.]([0-9]+)$"
          if [[ ${latest_tag} =~ ${regex} ]]; then
            # shellcheck disable=SC2004
            {
              # It seems that adding by 0 returns an error.
              (( major += ${BASH_REMATCH[1]} )) || true
              (( minor += ${BASH_REMATCH[2]} )) || true
              (( hotfix += ${BASH_REMATCH[3]} )) || true
            }
          else
            printf "ERROR: invalid tag mode [%s]\n" "${tag_mode:-not set}"
          fi
          if [[ ${tag_mode} == major ]]; then
            (( major+=1 ))
            minor=0
            hotfix=0
          elif [[ ${tag_mode} == minor ]]; then
            (( minor+=1 ))
            hotfix=0
          elif [[ ${tag_mode} == patch ]]; then
            (( hotfix+=1 ))
          fi
          printf -v next_tag "v%d.%d.%d" "${major}" "${minor}" "${hotfix}"
          {
            printf "  Next Tag: %s\n" "${next_tag}"
          } | tee -a "${GITHUB_STEP_SUMMARY}"
          PR_COMMENT1="$(mktemp)"
          {
            printf "\n"
            printf "Merge the PR using git on the command-line to make sure the commits remain signed.\n"
            printf "\n"
            printf "%s\n" '```'
            printf "$ %s\n" "git config --global alias.fetchpr '"'!'"pr() { git fetch origin pull/\$1/head:prs/\$1; git co prs/\$1; }; pr'"
            printf "\n"
            printf "%s\n" "$ git config --global alias.lg \"log --color=auto --graph --pretty=format:'%Cred%<(8)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an> [%ce] %Creset%C(cyan)[gpg: %G?]%Creset' --abbrev-commit --decorate\""
            printf "\n"
            printf "$ git checkout main\n"
            printf "\n"
            printf "$ git pull origin main\n"
            printf "\n"
            printf "$ git lg -n 5\n"
            printf "\n"
            printf "$ git fetchpr %s\n" "${{ steps.cpr.outputs.pull-request-number }}"
            printf "\n"
            printf "$ git lg main..\n"
            printf "\n"
            printf "$ git checkout main\n"
            printf "\n"
            printf "$ git merge --ff-only prs/%s\n" "${{ steps.cpr.outputs.pull-request-number }}"
            printf "\n"
            printf "$ git lg origin/main..\n"
            printf "\n"
            printf "$ git push origin main\n"
            printf "%s\n" '```'
          } | tee -a "${PR_COMMENT1}"
          PR_COMMENT2="$(mktemp)"
          {
            printf "\n"
            printf "Command to run after merging the PR on the cli:\n"
            printf "\n"
            printf "%s\n" '```'
            printf "$ ./tag-release %s \"bump golang version to %s\"\n" "${next_tag}" "${{ env.NEW_GO_VER }}"
            printf "%s\n" '```'
          } | tee -a "${PR_COMMENT2}"
          cat "${PR_COMMENT1}" >> "${GITHUB_STEP_SUMMARY}"
          cat "${PR_COMMENT2}" >> "${GITHUB_STEP_SUMMARY}"
          gh pr comment "${{ steps.cpr.outputs.pull-request-url }}" --body-file "${PR_COMMENT1}"
          sleep 1s
          gh pr comment "${{ steps.cpr.outputs.pull-request-url }}" --body-file "${PR_COMMENT2}"
      - name: Push tag changes
        if: steps.cpr.outputs.pull-request-number > 0
        uses: ad-m/github-push-action@master
        with:
          branch: bump_golang_version
          force: false
          github_token: ${{ secrets.PAT }}
          tags: true
      - name: Auto approve
        if: false && steps.cpr.outputs.pull-request-operation == 'created' && steps.wait-for-go-checks.outputs.conclusion == 'success'
        uses: juliangruber/approve-pull-request-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.cpr.outputs.pull-request-number }}
      - name: Enable Pull Request Automerge
        if: false && steps.cpr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Error: Personal access tokens with fine grained access do not support the GraphQL API
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: rebase
